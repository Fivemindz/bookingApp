org: fivemindz
app: booking-app
service: serverless-booking-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
      BOOKINGS_TABLE: Bookings-${self:provider.stage}
      BOOKINGS_CREATED_AT_INDEX: CreatedAtIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  GetBookings:
    handler: src/lambda/http/getBookings.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: bookings
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKINGS_TABLE}
  
  CreateBookings:
    handler: src/lambda/http/createBooking.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: bookings
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKINGS_TABLE}

  UpdateBookings:
    handler: src/lambda/http/updateBooking.handler
    events:
      - http:
          authorizer: Auth
          method: patch
          path: bookings/{bookingId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKINGS_TABLE}
  
  DeleteBookings:
    handler: src/lambda/http/deleteBooking.handler
    events:
      - http:
          authorizer: Auth
          method: delete
          path: bookings/{bookingId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKINGS_TABLE}

resources:
  Resources:
    BookingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookingId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookingId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKINGS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOKINGS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL